#ifndef GENERATED_ASN1SCC_mcu_comms_H
#define GENERATED_ASN1SCC_mcu_comms_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


/*-- Setup_Type --------------------------------------------*/
typedef uint16_t Setup_Type_version;

typedef struct {
    Setup_Type_version version;

} Setup_Type;

flag Setup_Type_version_Equal(const Setup_Type_version* pVal1, const Setup_Type_version* pVal2);

flag Setup_Type_Equal(const Setup_Type* pVal1, const Setup_Type* pVal2);

#define ERR_SETUP_TYPE_VERSION		1  /*(0 .. 65535)*/
flag Setup_Type_version_IsConstraintValid(const Setup_Type_version* pVal, int* pErrCode);

#define ERR_SETUP_TYPE		6  /**/
flag Setup_Type_IsConstraintValid(const Setup_Type* pVal, int* pErrCode);

void Setup_Type_version_Initialize(Setup_Type_version* pVal);
void Setup_Type_Initialize(Setup_Type* pVal);

#define ERR_ACN_ENCODE_SETUP_TYPE		9  /**/
#define ERR_ACN_ENCODE_SETUP_TYPE_VERSION		4  /**/
#define Setup_Type_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define Setup_Type_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag Setup_Type_ACN_Encode(const Setup_Type* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SETUP_TYPE		10  /**/
#define ERR_ACN_DECODE_SETUP_TYPE_VERSION		5  /**/
flag Setup_Type_ACN_Decode(Setup_Type* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Inputs_Type --------------------------------------------*/


typedef struct {
    flag arr[6];
} Inputs_Type_stepper_fault;
typedef uint16_t Inputs_Type_adc_sequential_id;


typedef uint16_t Inputs_Type_adc_temp_value_elem;


typedef struct {
    Inputs_Type_adc_temp_value_elem arr[4];
} Inputs_Type_adc_temp_value;

typedef uint16_t Inputs_Type_fan_tach_count_elem;


typedef struct {
    Inputs_Type_fan_tach_count_elem arr[4];
} Inputs_Type_fan_tach_count;
typedef struct {
    Inputs_Type_stepper_fault stepper_fault;
    Inputs_Type_adc_sequential_id adc_sequential_id;
    Inputs_Type_adc_temp_value adc_temp_value;
    Inputs_Type_fan_tach_count fan_tach_count;

} Inputs_Type;

flag Inputs_Type_stepper_fault_Equal(const Inputs_Type_stepper_fault* pVal1, const Inputs_Type_stepper_fault* pVal2);

flag Inputs_Type_adc_sequential_id_Equal(const Inputs_Type_adc_sequential_id* pVal1, const Inputs_Type_adc_sequential_id* pVal2);

flag Inputs_Type_adc_temp_value_elem_Equal(const Inputs_Type_adc_temp_value_elem* pVal1, const Inputs_Type_adc_temp_value_elem* pVal2);

flag Inputs_Type_adc_temp_value_Equal(const Inputs_Type_adc_temp_value* pVal1, const Inputs_Type_adc_temp_value* pVal2);

flag Inputs_Type_fan_tach_count_elem_Equal(const Inputs_Type_fan_tach_count_elem* pVal1, const Inputs_Type_fan_tach_count_elem* pVal2);

flag Inputs_Type_fan_tach_count_Equal(const Inputs_Type_fan_tach_count* pVal1, const Inputs_Type_fan_tach_count* pVal2);

flag Inputs_Type_Equal(const Inputs_Type* pVal1, const Inputs_Type* pVal2);

#define ERR_INPUTS_TYPE_STEPPER_FAULT		16  /*(SIZE (6))*/
#define ERR_INPUTS_TYPE_STEPPER_FAULT_ELM		11  /**/
flag Inputs_Type_stepper_fault_IsConstraintValid(const Inputs_Type_stepper_fault* pVal, int* pErrCode);

#define ERR_INPUTS_TYPE_ADC_SEQUENTIAL_ID		21  /*(0 .. 65535)*/
flag Inputs_Type_adc_sequential_id_IsConstraintValid(const Inputs_Type_adc_sequential_id* pVal, int* pErrCode);

#define ERR_INPUTS_TYPE_ADC_TEMP_VALUE_ELM		26  /*(0 .. 65535)*/
flag Inputs_Type_adc_temp_value_elem_IsConstraintValid(const Inputs_Type_adc_temp_value_elem* pVal, int* pErrCode);

#define ERR_INPUTS_TYPE_ADC_TEMP_VALUE		31  /*(SIZE (4))*/
flag Inputs_Type_adc_temp_value_IsConstraintValid(const Inputs_Type_adc_temp_value* pVal, int* pErrCode);

#define ERR_INPUTS_TYPE_FAN_TACH_COUNT_ELM		36  /*(0 .. 65535)*/
flag Inputs_Type_fan_tach_count_elem_IsConstraintValid(const Inputs_Type_fan_tach_count_elem* pVal, int* pErrCode);

#define ERR_INPUTS_TYPE_FAN_TACH_COUNT		41  /*(SIZE (4))*/
flag Inputs_Type_fan_tach_count_IsConstraintValid(const Inputs_Type_fan_tach_count* pVal, int* pErrCode);

#define ERR_INPUTS_TYPE		46  /**/
flag Inputs_Type_IsConstraintValid(const Inputs_Type* pVal, int* pErrCode);

void Inputs_Type_stepper_fault_Initialize(Inputs_Type_stepper_fault* pVal);
void Inputs_Type_adc_sequential_id_Initialize(Inputs_Type_adc_sequential_id* pVal);
void Inputs_Type_adc_temp_value_elem_Initialize(Inputs_Type_adc_temp_value_elem* pVal);
void Inputs_Type_adc_temp_value_Initialize(Inputs_Type_adc_temp_value* pVal);
void Inputs_Type_fan_tach_count_elem_Initialize(Inputs_Type_fan_tach_count_elem* pVal);
void Inputs_Type_fan_tach_count_Initialize(Inputs_Type_fan_tach_count* pVal);
void Inputs_Type_Initialize(Inputs_Type* pVal);

#define ERR_ACN_ENCODE_INPUTS_TYPE		49  /**/
#define ERR_ACN_ENCODE_INPUTS_TYPE_STEPPER_FAULT		19  /**/
#define ERR_ACN_ENCODE_INPUTS_TYPE_STEPPER_FAULT_ELM		14  /**/
#define ERR_ACN_ENCODE_INPUTS_TYPE_ADC_SEQUENTIAL_ID		24  /**/
#define ERR_ACN_ENCODE_INPUTS_TYPE_ADC_TEMP_VALUE		34  /**/
#define ERR_ACN_ENCODE_INPUTS_TYPE_ADC_TEMP_VALUE_ELM		29  /**/
#define ERR_ACN_ENCODE_INPUTS_TYPE_FAN_TACH_COUNT		44  /**/
#define ERR_ACN_ENCODE_INPUTS_TYPE_FAN_TACH_COUNT_ELM		39  /**/
#define Inputs_Type_REQUIRED_BYTES_FOR_ACN_ENCODING       19
#define Inputs_Type_REQUIRED_BITS_FOR_ACN_ENCODING        150

flag Inputs_Type_ACN_Encode(const Inputs_Type* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_INPUTS_TYPE		50  /**/
#define ERR_ACN_DECODE_INPUTS_TYPE_STEPPER_FAULT		20  /**/
#define ERR_ACN_DECODE_INPUTS_TYPE_STEPPER_FAULT_ELM		15  /**/
#define ERR_ACN_DECODE_INPUTS_TYPE_ADC_SEQUENTIAL_ID		25  /**/
#define ERR_ACN_DECODE_INPUTS_TYPE_ADC_TEMP_VALUE		35  /**/
#define ERR_ACN_DECODE_INPUTS_TYPE_ADC_TEMP_VALUE_ELM		30  /**/
#define ERR_ACN_DECODE_INPUTS_TYPE_FAN_TACH_COUNT		45  /**/
#define ERR_ACN_DECODE_INPUTS_TYPE_FAN_TACH_COUNT_ELM		40  /**/
flag Inputs_Type_ACN_Decode(Inputs_Type* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Outputs_Type --------------------------------------------*/


typedef struct {
    flag arr[6];
} Outputs_Type_stepper_output_enable;


typedef struct {
    flag arr[6];
} Outputs_Type_stepper_enable;

typedef uint16_t Outputs_Type_fan_pwm_elem;


typedef struct {
    Outputs_Type_fan_pwm_elem arr[4];
} Outputs_Type_fan_pwm;
typedef struct {
    flag heater_enable;
    Outputs_Type_stepper_output_enable stepper_output_enable;
    Outputs_Type_stepper_enable stepper_enable;
    Outputs_Type_fan_pwm fan_pwm;

} Outputs_Type;

flag Outputs_Type_stepper_output_enable_Equal(const Outputs_Type_stepper_output_enable* pVal1, const Outputs_Type_stepper_output_enable* pVal2);

flag Outputs_Type_stepper_enable_Equal(const Outputs_Type_stepper_enable* pVal1, const Outputs_Type_stepper_enable* pVal2);

flag Outputs_Type_fan_pwm_elem_Equal(const Outputs_Type_fan_pwm_elem* pVal1, const Outputs_Type_fan_pwm_elem* pVal2);

flag Outputs_Type_fan_pwm_Equal(const Outputs_Type_fan_pwm* pVal1, const Outputs_Type_fan_pwm* pVal2);

flag Outputs_Type_Equal(const Outputs_Type* pVal1, const Outputs_Type* pVal2);

#define ERR_OUTPUTS_TYPE_STEPPER_OUTPUT_ENABLE		61  /*(SIZE (6))*/
#define ERR_OUTPUTS_TYPE_STEPPER_OUTPUT_ENABLE_ELM		56  /**/
flag Outputs_Type_stepper_output_enable_IsConstraintValid(const Outputs_Type_stepper_output_enable* pVal, int* pErrCode);

#define ERR_OUTPUTS_TYPE_STEPPER_ENABLE		71  /*(SIZE (6))*/
#define ERR_OUTPUTS_TYPE_STEPPER_ENABLE_ELM		66  /**/
flag Outputs_Type_stepper_enable_IsConstraintValid(const Outputs_Type_stepper_enable* pVal, int* pErrCode);

#define ERR_OUTPUTS_TYPE_FAN_PWM_ELM		76  /*(0 .. 639)*/
flag Outputs_Type_fan_pwm_elem_IsConstraintValid(const Outputs_Type_fan_pwm_elem* pVal, int* pErrCode);

#define ERR_OUTPUTS_TYPE_FAN_PWM		81  /*(SIZE (4))*/
flag Outputs_Type_fan_pwm_IsConstraintValid(const Outputs_Type_fan_pwm* pVal, int* pErrCode);

#define ERR_OUTPUTS_TYPE		86  /**/
#define ERR_OUTPUTS_TYPE_HEATER_ENABLE		51  /**/
flag Outputs_Type_IsConstraintValid(const Outputs_Type* pVal, int* pErrCode);

void Outputs_Type_stepper_output_enable_Initialize(Outputs_Type_stepper_output_enable* pVal);
void Outputs_Type_stepper_enable_Initialize(Outputs_Type_stepper_enable* pVal);
void Outputs_Type_fan_pwm_elem_Initialize(Outputs_Type_fan_pwm_elem* pVal);
void Outputs_Type_fan_pwm_Initialize(Outputs_Type_fan_pwm* pVal);
void Outputs_Type_Initialize(Outputs_Type* pVal);

#define ERR_ACN_ENCODE_OUTPUTS_TYPE		89  /**/
#define ERR_ACN_ENCODE_OUTPUTS_TYPE_HEATER_ENABLE		54  /**/
#define ERR_ACN_ENCODE_OUTPUTS_TYPE_STEPPER_OUTPUT_ENABLE		64  /**/
#define ERR_ACN_ENCODE_OUTPUTS_TYPE_STEPPER_OUTPUT_ENABLE_ELM		59  /**/
#define ERR_ACN_ENCODE_OUTPUTS_TYPE_STEPPER_ENABLE		74  /**/
#define ERR_ACN_ENCODE_OUTPUTS_TYPE_STEPPER_ENABLE_ELM		69  /**/
#define ERR_ACN_ENCODE_OUTPUTS_TYPE_FAN_PWM		84  /**/
#define ERR_ACN_ENCODE_OUTPUTS_TYPE_FAN_PWM_ELM		79  /**/
#define Outputs_Type_REQUIRED_BYTES_FOR_ACN_ENCODING       7
#define Outputs_Type_REQUIRED_BITS_FOR_ACN_ENCODING        53

flag Outputs_Type_ACN_Encode(const Outputs_Type* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OUTPUTS_TYPE		90  /**/
#define ERR_ACN_DECODE_OUTPUTS_TYPE_HEATER_ENABLE		55  /**/
#define ERR_ACN_DECODE_OUTPUTS_TYPE_STEPPER_OUTPUT_ENABLE		65  /**/
#define ERR_ACN_DECODE_OUTPUTS_TYPE_STEPPER_OUTPUT_ENABLE_ELM		60  /**/
#define ERR_ACN_DECODE_OUTPUTS_TYPE_STEPPER_ENABLE		75  /**/
#define ERR_ACN_DECODE_OUTPUTS_TYPE_STEPPER_ENABLE_ELM		70  /**/
#define ERR_ACN_DECODE_OUTPUTS_TYPE_FAN_PWM		85  /**/
#define ERR_ACN_DECODE_OUTPUTS_TYPE_FAN_PWM_ELM		80  /**/
flag Outputs_Type_ACN_Decode(Outputs_Type* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Packet_Data_Type --------------------------------------------*/

typedef enum {
    Packet_Data_Type_NONE,
    setup_PRESENT,
    inputs_PRESENT,
    outputs_PRESENT
} Packet_Data_Type_selection;

typedef union {
    Setup_Type setup;
    Inputs_Type inputs;
    Outputs_Type outputs;
} Packet_Data_Type_unchecked_union;

typedef struct {
    Packet_Data_Type_selection kind;

    Packet_Data_Type_unchecked_union u;
} Packet_Data_Type;

flag Packet_Data_Type_Equal(const Packet_Data_Type* pVal1, const Packet_Data_Type* pVal2);

#define ERR_PACKET_DATA_TYPE		201  /**/
#define ERR_PACKET_DATA_TYPE_SETUP_2		106  /**/
#define ERR_PACKET_DATA_TYPE_INPUTS_2		151  /**/
#define ERR_PACKET_DATA_TYPE_OUTPUTS_2		196  /**/
flag Packet_Data_Type_IsConstraintValid(const Packet_Data_Type* pVal, int* pErrCode);

void Packet_Data_Type_Initialize(Packet_Data_Type* pVal);

#define ERR_ACN_ENCODE_PACKET_DATA_TYPE		204  /**/
#define ERR_ACN_ENCODE_PACKET_DATA_TYPE_SETUP_2		109  /**/
#define ERR_ACN_ENCODE_PACKET_DATA_TYPE_INPUTS_2		154  /**/
#define ERR_ACN_ENCODE_PACKET_DATA_TYPE_OUTPUTS_2		199  /**/
#define Packet_Data_Type_REQUIRED_BYTES_FOR_ACN_ENCODING       19
#define Packet_Data_Type_REQUIRED_BITS_FOR_ACN_ENCODING        152

flag Packet_Data_Type_ACN_Encode(const Packet_Data_Type* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PACKET_DATA_TYPE		205  /**/
#define ERR_ACN_DECODE_PACKET_DATA_TYPE_SETUP_2		110  /**/
#define ERR_ACN_DECODE_PACKET_DATA_TYPE_INPUTS_2		155  /**/
#define ERR_ACN_DECODE_PACKET_DATA_TYPE_OUTPUTS_2		200  /**/
flag Packet_Data_Type_ACN_Decode(Packet_Data_Type* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Packet_Type --------------------------------------------*/
typedef struct {
    BitStream Packet_Type_body_length_in_bytes;
    BitStream Packet_Type_packet_crc32;
} Packet_Type_extension_function_positions;
typedef struct {
    Packet_Data_Type packet_data;

} Packet_Type;

flag Packet_Type_Equal(const Packet_Type* pVal1, const Packet_Type* pVal2);

#define ERR_PACKET_TYPE		325  /**/
#define ERR_PACKET_TYPE_PACKET_DATA_2		320  /**/
flag Packet_Type_IsConstraintValid(const Packet_Type* pVal, int* pErrCode);

void Packet_Type_Initialize(Packet_Type* pVal);

#define ERR_ACN_ENCODE_PACKET_TYPE		328  /**/
#define ERR_ACN_ENCODE_PACKET_TYPE_BODY_LENGTH_IN_BYTES		206  /**/
#define ERR_ACN_ENCODE_PACKET_TYPE_PACKET_DATA_KIND_UNINITIALIZED		329  /**/
#define ERR_ACN_ENCODE_PACKET_TYPE_PACKET_DATA_KIND		208  /**/
#define ERR_ACN_ENCODE_PACKET_TYPE_PACKET_DATA		318  /**/
#define ERR_ACN_ENCODE_PACKET_TYPE_PACKET_DATA_SETUP_2		223  /**/
#define ERR_ACN_ENCODE_PACKET_TYPE_PACKET_DATA_INPUTS_2		268  /**/
#define ERR_ACN_ENCODE_PACKET_TYPE_PACKET_DATA_OUTPUTS_2		313  /**/
#define ERR_ACN_ENCODE_PACKET_TYPE_PACKET_CRC32		323  /**/
#define Packet_Type_REQUIRED_BYTES_FOR_ACN_ENCODING       27
#define Packet_Type_REQUIRED_BITS_FOR_ACN_ENCODING        213

flag Packet_Type_ACN_Encode(const Packet_Type* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PACKET_TYPE		330  /**/
#define ERR_ACN_DECODE_PACKET_TYPE_BODY_LENGTH_IN_BYTES		207  /**/
#define ERR_ACN_DECODE_PACKET_TYPE_PACKET_DATA_KIND		209  /**/
#define ERR_ACN_DECODE_PACKET_TYPE_PACKET_DATA		319  /**/
#define ERR_ACN_DECODE_PACKET_TYPE_PACKET_DATA_SETUP_2		224  /**/
#define ERR_ACN_DECODE_PACKET_TYPE_PACKET_DATA_INPUTS_2		269  /**/
#define ERR_ACN_DECODE_PACKET_TYPE_PACKET_DATA_OUTPUTS_2		314  /**/
#define ERR_ACN_DECODE_PACKET_TYPE_PACKET_CRC32		324  /**/
flag Packet_Type_ACN_Decode(Packet_Type* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    setup = 0,
    inputs = 1,
    outputs = 2
} Packet_Data_Kind;

// please use the following macros to avoid breaking code.
#define Packet_Data_Kind_setup setup
#define Packet_Data_Kind_inputs inputs
#define Packet_Data_Kind_outputs outputs

flag Packet_Data_Kind_Equal(const Packet_Data_Kind* pVal1, const Packet_Data_Kind* pVal2);

#define ERR_PACKET_DATA_KIND		91  /*setup | inputs | outputs*/
flag Packet_Data_Kind_IsConstraintValid(const Packet_Data_Kind* pVal, int* pErrCode);

void Packet_Data_Kind_Initialize(Packet_Data_Kind* pVal);

#define ERR_ACN_ENCODE_PACKET_DATA_KIND		94  /**/
#define Packet_Data_Kind_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define Packet_Data_Kind_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag Packet_Data_Kind_ACN_Encode(const Packet_Data_Kind* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PACKET_DATA_KIND		95  /**/
flag Packet_Data_Kind_ACN_Decode(Packet_Data_Kind* pVal, BitStream* pBitStrm, int* pErrCode);


/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */



#ifdef  __cplusplus
}

#endif

#endif
